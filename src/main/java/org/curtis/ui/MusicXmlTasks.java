package org.curtis.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.curtis.util.StringUtil;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ComponentAdapter;

public class MusicXmlTasks {
    private JPanel taskForm;
    private JPanel header;
    private JPanel row1Left;
    private JPanel row1Right;
    private JPanel row2Left;
    private JPanel row2Right;
    private JPanel row3Left;
    private JPanel row3Right;
    private JPanel row4Left;
    private JPanel row4Right;
    private JPanel row5Left;
    private JPanel row5Right;
    private JPanel row6Left;
    private JPanel row6Right;
    private JPanel row7Left;
    private JPanel row7Right;
    private JPanel row8Left;
    private JPanel row8Right;
    private JLabel headerLabel;
    private JLabel taskLabel;
    private JList taskList;
    private JLabel taskName;
    private JPanel row9Left;
    private JPanel row9Right;
    private JLabel formElement1Text;
    private JLabel formElement2Text;
    private JLabel formElement3Text;
    private JLabel formElement4Text;
    private JLabel formElement5Text;
    private JLabel formElement6Text;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        taskForm = new JPanel();
        taskForm.setLayout(new GridLayoutManager(10, 2, new Insets(0, 0, 0, 0), -1, -1));
        taskForm.setBackground(new Color(-1));
        header = new JPanel();
        header.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        header.setBackground(new Color(-1));
        taskForm.add(header, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        headerLabel = new JLabel();
        headerLabel.setFont(new Font(headerLabel.getFont().getName(), Font.BOLD, 20));
        headerLabel.setText("MusicXml Tasks");
        header.add(headerLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row1Left = new JPanel();
        row1Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row1Left.setBackground(new Color(-1));
        taskForm.add(row1Left, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskLabel = new JLabel();
        taskLabel.setBackground(new Color(-1));
        taskLabel.setFont(new Font(taskLabel.getFont().getName(), Font.BOLD, 16));
        taskLabel.setText("Task: ");
        taskLabel.setVisible(true);
        row1Left.add(taskLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row1Right = new JPanel();
        row1Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row1Right.setBackground(new Color(-1));
        taskForm.add(row1Right, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("Set Database Properties");
        defaultListModel1.addElement("MusicXml File to Database Record");
        defaultListModel1.addElement("Database Record to MusicXml File");
        defaultListModel1.addElement("Database Record to Lilypond File");
        defaultListModel1.addElement("MusicXml File to Lilypond File");
        taskList.setModel(defaultListModel1);
        taskList.setSelectionMode(0);
        row1Right.add(taskList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        row2Left = new JPanel();
        row2Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row2Left.setBackground(new Color(-1));
        taskForm.add(row2Left, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row2Right = new JPanel();
        row2Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row2Right.setBackground(new Color(-1));
        taskForm.add(row2Right, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskName = new JLabel();
        taskName.setFont(new Font(taskName.getFont().getName(), Font.BOLD, 16));
        taskName.setText("");
        row2Right.add(taskName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row3Left = new JPanel();
        row3Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row3Left.setBackground(new Color(-1));
        taskForm.add(row3Left, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement1Text = new JLabel();
        formElement1Text.setBackground(new Color(-1));
        formElement1Text.setText("");
        row3Left.add(formElement1Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row3Right = new JPanel();
        row3Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row3Right.setBackground(new Color(-1));
        taskForm.add(row3Right, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row4Left = new JPanel();
        row4Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row4Left.setBackground(new Color(-1));
        taskForm.add(row4Left, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement2Text = new JLabel();
        formElement2Text.setBackground(new Color(-1));
        formElement2Text.setText("");
        row4Left.add(formElement2Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row4Right = new JPanel();
        row4Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row4Right.setBackground(new Color(-1));
        taskForm.add(row4Right, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row5Left = new JPanel();
        row5Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row5Left.setBackground(new Color(-1));
        taskForm.add(row5Left, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement3Text = new JLabel();
        formElement3Text.setBackground(new Color(-1));
        formElement3Text.setText("");
        row5Left.add(formElement3Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row5Right = new JPanel();
        row5Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row5Right.setBackground(new Color(-1));
        taskForm.add(row5Right, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row6Left = new JPanel();
        row6Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row6Left.setBackground(new Color(-1));
        taskForm.add(row6Left, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement4Text = new JLabel();
        formElement4Text.setBackground(new Color(-1));
        formElement4Text.setText("");
        row6Left.add(formElement4Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row6Right = new JPanel();
        row6Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row6Right.setBackground(new Color(-1));
        taskForm.add(row6Right, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row7Left = new JPanel();
        row7Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row7Left.setBackground(new Color(-1));
        taskForm.add(row7Left, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement5Text = new JLabel();
        formElement5Text.setBackground(new Color(-1));
        formElement5Text.setText("");
        row7Left.add(formElement5Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row7Right = new JPanel();
        row7Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row7Right.setBackground(new Color(-1));
        taskForm.add(row7Right, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row8Left = new JPanel();
        row8Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row8Left.setBackground(new Color(-1));
        taskForm.add(row8Left, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement6Text = new JLabel();
        formElement6Text.setBackground(new Color(-1));
        formElement6Text.setText("");
        row8Left.add(formElement6Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row8Right = new JPanel();
        row8Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row8Right.setBackground(new Color(-1));
        taskForm.add(row8Right, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row9Left = new JPanel();
        row9Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row9Left.setBackground(new Color(-1));
        taskForm.add(row9Left, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row9Right = new JPanel();
        row9Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row9Right.setBackground(new Color(-1));
        taskForm.add(row9Right, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return taskForm;
    }

    private enum InputType {
        INPUT_SMALL, INPUT_LARGE, PASSWORD, FILE, CHECKBOX, BUTTON, NONE
    }

    ;

    public MusicXmlTasks() {

        taskList.addComponentListener(new ComponentAdapter() {
        });
        taskList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getSource() == taskList) {
                    String selectedValue = (String) taskList.getSelectedValue();
                    handleSelection(selectedValue);
                }
            }
        });
    }

    private void handleSelection(String selectedValue) {
        taskName.setText(selectedValue);

        String element1Text = "";
        String element2Text = "";
        String element3Text = "";
        String element4Text = "";
        String element5Text = "";
        String element6Text = "";
        InputType element1Type = InputType.NONE;
        InputType element2Type = InputType.NONE;
        InputType element3Type = InputType.NONE;
        InputType element4Type = InputType.NONE;
        InputType element5Type = InputType.NONE;
        InputType element6Type = InputType.NONE;
        InputType element7Type = InputType.NONE;

        row3Right.removeAll();
        row4Right.removeAll();
        row5Right.removeAll();
        row6Right.removeAll();
        row7Right.removeAll();
        row8Right.removeAll();

        switch (selectedValue) {
            case "Set Database Properties":
                element1Text = "Username: ";
                element1Type = InputType.INPUT_SMALL;
                element2Text = "Password: ";
                element2Type = InputType.PASSWORD;
                element3Text = "Database Name: ";
                element3Type = InputType.INPUT_SMALL;
                element4Text = "Server: ";
                element4Type = InputType.INPUT_SMALL;
                element5Text = "Create User: ";
                element5Type = InputType.CHECKBOX;
                element6Text = "Create Database: ";
                element6Type = InputType.CHECKBOX;
                element7Type = InputType.BUTTON;
                break;
            case "MusicXml File to Database Record":
                element1Text = "Score Name: ";
                element1Type = InputType.INPUT_LARGE;
                element2Text = "Input File: ";
                element2Type = InputType.FILE;
                element3Type = InputType.BUTTON;
                break;
            case "Database Record to MusicXml File":
                element1Text = "Score Name: ";
                element1Type = InputType.INPUT_LARGE;
                element2Text = "Output File: ";
                element2Type = InputType.FILE;
                element3Text = "Skip Comments: ";
                element3Type = InputType.CHECKBOX;
                element4Type = InputType.BUTTON;
                break;
            case "Database Record to Lilypond File":
                element1Text = "Score Name: ";
                element1Type = InputType.INPUT_LARGE;
                element2Text = "Output File: ";
                element2Type = InputType.FILE;
                element3Type = InputType.BUTTON;
                break;
            case "MusicXml File to Lilypond File":
                element1Text = "Input File: ";
                element1Type = InputType.FILE;
                element2Text = "Output File: ";
                element2Type = InputType.FILE;
                element3Type = InputType.BUTTON;
                break;
        }

        formElement1Text.setText(element1Text);
        formElement2Text.setText(element2Text);
        formElement3Text.setText(element3Text);
        formElement4Text.setText(element4Text);
        formElement5Text.setText(element5Text);
        formElement6Text.setText(element6Text);

        addFormElement(row3Right, element1Type);
        addFormElement(row4Right, element2Type);
        addFormElement(row5Right, element3Type);
        addFormElement(row6Right, element4Type);
        addFormElement(row7Right, element5Type);
        addFormElement(row8Right, element6Type);
        addFormElement(row9Right, element7Type);

        taskForm.revalidate();
    }

    private void addFormElement(JPanel jPanel, InputType inputType) {
        switch (inputType) {
            case INPUT_SMALL:
                jPanel.add(new JTextField(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, -1), new Dimension(150, -1), 0, false));
                break;
            case INPUT_LARGE:
                jPanel.add(new JTextField(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, -1), new Dimension(300, -1), new Dimension(300, -1), 0, false));
                break;
            case PASSWORD:
                jPanel.add(new JPasswordField(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, -1), new Dimension(150, -1), 0, false));
                break;
            case FILE:
                break;
            case CHECKBOX:
                break;
            case BUTTON:
                break;
            case NONE:
                break;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("MusicXmlTasks");
        frame.setContentPane(new MusicXmlTasks().taskForm);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 700);
        frame.setVisible(true);
    }

}
