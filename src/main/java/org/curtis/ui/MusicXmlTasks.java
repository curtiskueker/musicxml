package org.curtis.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.curtis.musicxml.util.MusicXmlUtil;
import org.curtis.properties.AppProperties;
import org.curtis.properties.PropertyFileNotFoundException;
import org.curtis.ui.task.SetPropertiesTask;
import org.curtis.ui.task.Db2LyTask;
import org.curtis.ui.task.Db2MusicXmlTask;
import org.curtis.ui.task.MusicXml2DbTask;
import org.curtis.ui.task.MusicXml2LyTask;
import org.curtis.ui.task.MusicXmlTask;
import org.curtis.ui.task.exception.TaskException;
import org.curtis.util.StringUtil;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

public class MusicXmlTasks {
    private JPanel taskForm;
    private JPanel header;
    private JPanel row1Left;
    private JPanel row1Right;
    private JPanel row2Left;
    private JPanel row2Right;
    private JPanel row3Left;
    private JPanel row3Right;
    private JPanel row4Left;
    private JPanel row4Right;
    private JPanel row5Left;
    private JPanel row5Right;
    private JPanel row6Left;
    private JPanel row6Right;
    private JPanel row7Left;
    private JPanel row7Right;
    private JPanel row8Left;
    private JPanel row8Right;
    private JLabel headerLabel;
    private JLabel taskLabel;
    private JComboBox taskSelection;
    private JLabel taskName;
    private JLabel formElement1Text;
    private JLabel formElement2Text;
    private JLabel formElement3Text;
    private JLabel formElement4Text;
    private JLabel formElement5Text;
    private JLabel formElement6Text;
    private JPanel statusPanel;
    private JScrollPane statusScrollPane;
    private JTextArea statusTextArea;
    private JCheckBox showPassword;

    private String selectedValue;
    private Map<String, Component> componentMap = new HashMap<>();

    public static String PROPERTIES_DIRECTORY = System.getProperty("user.home") + "/.musicxml";
    public static String PROPERTIES_BUNDLE = "musicxml";
    public static String PROPERTIES_FILENAME = PROPERTIES_DIRECTORY + "/" + PROPERTIES_BUNDLE;

    private static final int SMALL_INPUT_SIZE = 150;
    private static final int LARGE_INPUT_SIZE = 300;
    private static final int CHOOSER_SIZE = 450;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        taskForm = new JPanel();
        taskForm.setLayout(new GridLayoutManager(10, 2, new Insets(0, 0, 0, 0), -1, -1));
        taskForm.setBackground(new Color(-1));
        header = new JPanel();
        header.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        header.setBackground(new Color(-1));
        taskForm.add(header, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        headerLabel = new JLabel();
        headerLabel.setFont(new Font(headerLabel.getFont().getName(), Font.BOLD, 20));
        headerLabel.setText("MusicXml Tasks");
        header.add(headerLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row1Left = new JPanel();
        row1Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row1Left.setBackground(new Color(-1));
        taskForm.add(row1Left, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskLabel = new JLabel();
        taskLabel.setBackground(new Color(-1));
        taskLabel.setFont(new Font(taskLabel.getFont().getName(), Font.BOLD, 16));
        taskLabel.setText("Task: ");
        taskLabel.setVisible(true);
        row1Left.add(taskLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row1Right = new JPanel();
        row1Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row1Right.setBackground(new Color(-1));
        taskForm.add(row1Right, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskSelection = new JComboBox();
        taskSelection.setBackground(new Color(-1));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("Set Properties");
        defaultComboBoxModel1.addElement("MusicXml File to Database Record");
        defaultComboBoxModel1.addElement("Database Record to MusicXml File");
        defaultComboBoxModel1.addElement("Database Record to Lilypond File");
        defaultComboBoxModel1.addElement("MusicXml File to Lilypond File");
        taskSelection.setModel(defaultComboBoxModel1);
        row1Right.add(taskSelection, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row2Left = new JPanel();
        row2Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row2Left.setBackground(new Color(-1));
        taskForm.add(row2Left, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row2Right = new JPanel();
        row2Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row2Right.setBackground(new Color(-1));
        taskForm.add(row2Right, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        taskName = new JLabel();
        taskName.setFont(new Font(taskName.getFont().getName(), Font.BOLD, 16));
        taskName.setText("");
        row2Right.add(taskName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row3Left = new JPanel();
        row3Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row3Left.setBackground(new Color(-1));
        taskForm.add(row3Left, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement1Text = new JLabel();
        formElement1Text.setBackground(new Color(-1));
        formElement1Text.setText("");
        row3Left.add(formElement1Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row3Right = new JPanel();
        row3Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row3Right.setBackground(new Color(-1));
        taskForm.add(row3Right, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row4Left = new JPanel();
        row4Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row4Left.setBackground(new Color(-1));
        taskForm.add(row4Left, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement2Text = new JLabel();
        formElement2Text.setBackground(new Color(-1));
        formElement2Text.setText("");
        row4Left.add(formElement2Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row4Right = new JPanel();
        row4Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row4Right.setBackground(new Color(-1));
        taskForm.add(row4Right, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row5Left = new JPanel();
        row5Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row5Left.setBackground(new Color(-1));
        taskForm.add(row5Left, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement3Text = new JLabel();
        formElement3Text.setBackground(new Color(-1));
        formElement3Text.setText("");
        row5Left.add(formElement3Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row5Right = new JPanel();
        row5Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row5Right.setBackground(new Color(-1));
        taskForm.add(row5Right, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row6Left = new JPanel();
        row6Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row6Left.setBackground(new Color(-1));
        taskForm.add(row6Left, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement4Text = new JLabel();
        formElement4Text.setBackground(new Color(-1));
        formElement4Text.setText("");
        row6Left.add(formElement4Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row6Right = new JPanel();
        row6Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row6Right.setBackground(new Color(-1));
        taskForm.add(row6Right, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row7Left = new JPanel();
        row7Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row7Left.setBackground(new Color(-1));
        taskForm.add(row7Left, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement5Text = new JLabel();
        formElement5Text.setBackground(new Color(-1));
        formElement5Text.setText("");
        row7Left.add(formElement5Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row7Right = new JPanel();
        row7Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row7Right.setBackground(new Color(-1));
        taskForm.add(row7Right, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        row8Left = new JPanel();
        row8Left.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row8Left.setBackground(new Color(-1));
        taskForm.add(row8Left, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        formElement6Text = new JLabel();
        formElement6Text.setBackground(new Color(-1));
        formElement6Text.setText("");
        row8Left.add(formElement6Text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        row8Right = new JPanel();
        row8Right.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        row8Right.setBackground(new Color(-1));
        taskForm.add(row8Right, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        statusPanel = new JPanel();
        statusPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        statusPanel.setBackground(new Color(-1));
        taskForm.add(statusPanel, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        statusScrollPane = new JScrollPane();
        statusScrollPane.setBackground(new Color(-1));
        statusScrollPane.setVerticalScrollBarPolicy(22);
        statusPanel.add(statusScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        statusTextArea = new JTextArea();
        statusTextArea.setEditable(false);
        statusTextArea.setRows(8);
        statusTextArea.setText("");
        statusScrollPane.setViewportView(statusTextArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return taskForm;
    }

    private enum InputType {
        INPUT_SMALL, INPUT_LARGE, PASSWORD, INPUT_FILE, OUTPUT_DIRECTORY, SCORE_NAME_SELECTION, CHECKBOX, BUTTON, NONE
    }

    public MusicXmlTasks() {
        taskSelection.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == taskSelection) {
                    String selection = (String) taskSelection.getSelectedItem();
                    if (!selection.equals(selectedValue)) {
                        selectedValue = selection;
                        handleSelection();
                    }
                }
            }
        });

        setupStatusArea();
    }

    private void handleSelection() {
        taskName.setText(selectedValue);
        try {
            AppProperties.addPropertiesBundle(PROPERTIES_DIRECTORY, PROPERTIES_BUNDLE);
        } catch (PropertyFileNotFoundException e) {
            //
        }

        String element1Text = "";
        String element2Text = "";
        String element3Text = "";
        String element4Text = "";
        String element5Text = "";
        InputType element1Type = InputType.NONE;
        InputType element2Type = InputType.NONE;
        InputType element3Type = InputType.NONE;
        InputType element4Type = InputType.NONE;
        InputType element5Type = InputType.NONE;
        InputType element6Type = InputType.NONE;
        String element1Name = "";
        String element2Name = "";
        String element3Name = "";
        String element4Name = "";
        String element5Name = "";
        String element6Name = "";
        String element1Value = "";
        String element2Value = "";
        String element3Value = "";
        String element4Value = "";
        String element5Value = "";
        String element6Value = "";

        row3Right.removeAll();
        row4Right.removeAll();
        row5Right.removeAll();
        row6Right.removeAll();
        row7Right.removeAll();
        row8Right.removeAll();
        componentMap.clear();

        switch (selectedValue) {
            case "Set Properties":
                element1Text = "Username: ";
                element1Type = InputType.INPUT_SMALL;
                element1Name = "username";
                element1Value = AppProperties.getOptionalProperty("musicxml.database.username");
                element2Text = "Password: ";
                element2Type = InputType.PASSWORD;
                element2Name = "password";
                element2Value = AppProperties.getOptionalProperty("musicxml.database.password");
                element3Text = "Database Name: ";
                element3Type = InputType.INPUT_SMALL;
                element3Name = "databaseName";
                element3Value = AppProperties.getOptionalProperty("musicxml.database.name");
                element4Text = "Server: ";
                element4Type = InputType.INPUT_SMALL;
                element4Name = "server";
                element4Value = AppProperties.getOptionalProperty("musicxml.database.server");
                if (StringUtil.isEmpty(element4Value)) element4Value = "localhost";
                element5Text = "Create Database Tables: ";
                element5Type = InputType.CHECKBOX;
                element5Name = "createDatabase";
                element6Type = InputType.BUTTON;
                element6Name = "submit";
                break;
            case "MusicXml File to Database Record":
                element1Text = "Score Name: ";
                element1Type = InputType.INPUT_LARGE;
                element1Name = "scoreName";
                element2Text = "Input File: ";
                element2Type = InputType.INPUT_FILE;
                element2Name = "inputFile";
                element2Value = "xml";
                element3Type = InputType.BUTTON;
                element3Name = "submit";
                break;
            case "Database Record to MusicXml File":
                element1Text = "Score Name: ";
                element1Type = InputType.SCORE_NAME_SELECTION;
                element1Name = "scoreName";
                element2Text = "Output Directory: ";
                element2Type = InputType.OUTPUT_DIRECTORY;
                element2Name = "outputDirectory";
                element3Text = "Output Filename (.xml): ";
                element3Type = InputType.INPUT_SMALL;
                element3Name = "outputFile";
                element4Text = "Skip Comments: ";
                element4Type = InputType.CHECKBOX;
                element4Name = "skipComments";
                element5Type = InputType.BUTTON;
                element5Name = "submit";
                break;
            case "Database Record to Lilypond File":
                element1Text = "Score Name: ";
                element1Type = InputType.SCORE_NAME_SELECTION;
                element1Name = "scoreName";
                element2Text = "Output Directory: ";
                element2Type = InputType.OUTPUT_DIRECTORY;
                element2Name = "outputDirectory";
                element3Text = "Output Filename (.ly): ";
                element3Type = InputType.INPUT_SMALL;
                element3Name = "outputFile";
                element4Type = InputType.BUTTON;
                element4Name = "submit";
                break;
            case "MusicXml File to Lilypond File":
                element1Text = "Input File: ";
                element1Type = InputType.INPUT_FILE;
                element1Name = "inputFile";
                element1Value = "xml";
                element2Text = "Output Directory: ";
                element2Type = InputType.OUTPUT_DIRECTORY;
                element2Name = "outputDirectory";
                element3Text = "Output Filename (.ly): ";
                element3Type = InputType.INPUT_SMALL;
                element3Name = "outputFile";
                element4Type = InputType.BUTTON;
                element4Name = "submit";
                break;
        }

        formElement1Text.setText(element1Text);
        formElement2Text.setText(element2Text);
        formElement3Text.setText(element3Text);
        formElement4Text.setText(element4Text);
        formElement5Text.setText(element5Text);

        addFormElement(row3Right, element1Type, element1Name, element1Value);
        addFormElement(row4Right, element2Type, element2Name, element2Value);
        addFormElement(row5Right, element3Type, element3Name, element3Value);
        addFormElement(row6Right, element4Type, element4Name, element4Value);
        addFormElement(row7Right, element5Type, element5Name, element5Value);
        addFormElement(row8Right, element6Type, element6Name, element6Value);

        clearStatusArea();

        taskForm.revalidate();
    }

    private void addFormElement(JPanel jPanel, InputType inputType, String elementName, String elementValue) {
        Component component = null;

        switch (inputType) {
            case INPUT_SMALL:
                JTextField smallTextField = new JTextField();
                smallTextField.setText(elementValue);
                jPanel.add(smallTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(SMALL_INPUT_SIZE, -1), new Dimension(SMALL_INPUT_SIZE, -1), new Dimension(SMALL_INPUT_SIZE, -1), 0, false));
                component = smallTextField;
                break;
            case INPUT_LARGE:
                JTextField largeTextField = new JTextField();
                largeTextField.setText(elementValue);
                jPanel.add(largeTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(LARGE_INPUT_SIZE, -1), new Dimension(LARGE_INPUT_SIZE, -1), new Dimension(LARGE_INPUT_SIZE, -1), 0, false));
                component = largeTextField;
                break;
            case PASSWORD:
                JPasswordField passwordField = new JPasswordField();
                passwordField.setText(elementValue);
                jPanel.add(passwordField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(SMALL_INPUT_SIZE, -1), new Dimension(SMALL_INPUT_SIZE, -1), new Dimension(SMALL_INPUT_SIZE, -1), 0, false));

                showPassword = new JCheckBox();
                showPassword.setBackground(new Color(-1));
                showPassword.setText("Show: ");
                showPassword.setHorizontalTextPosition(SwingConstants.LEFT);
                showPassword.addItemListener(new ItemListener() {
                    public void itemStateChanged(ItemEvent e) {
                        if (showPassword.isSelected()) passwordField.setEchoChar((char) 0);
                        else passwordField.setEchoChar('*');
                    }
                });
                jPanel.add(showPassword, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

                component = passwordField;
                break;
            case INPUT_FILE:
                JFileChooser inputFileChooser = new JFileChooser();
                UIManager.put("FileChooser.readOnly", Boolean.TRUE);
                inputFileChooser.setControlButtonsAreShown(false);
                inputFileChooser.setAcceptAllFileFilterUsed(false);
                FileFilter inputFileFilter = new FileNameExtensionFilter(elementValue, elementValue);
                inputFileChooser.addChoosableFileFilter(inputFileFilter);
                jPanel.add(inputFileChooser, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(CHOOSER_SIZE, -1), new Dimension(CHOOSER_SIZE, -1), new Dimension(CHOOSER_SIZE, -1), 0, false));
                component = inputFileChooser;
                break;
            case OUTPUT_DIRECTORY:
                JFileChooser outputFileChooser = new JFileChooser();
                UIManager.put("FileChooser.readOnly", Boolean.TRUE);
                outputFileChooser.setControlButtonsAreShown(false);
                outputFileChooser.setAcceptAllFileFilterUsed(false);
                outputFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                jPanel.add(outputFileChooser, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(CHOOSER_SIZE, -1), new Dimension(CHOOSER_SIZE, -1), new Dimension(CHOOSER_SIZE, -1), 0, false));
                component = outputFileChooser;
                break;
            case SCORE_NAME_SELECTION:
                JComboBox selection = new JComboBox(MusicXmlUtil.getScoreNames().toArray());
                selection.setBackground(new Color(-1));
                jPanel.add(selection, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
                component = selection;
                break;
            case CHECKBOX:
                JCheckBox checkBox = new JCheckBox();
                checkBox.setBackground(new Color(-1));
                jPanel.add(checkBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
                component = checkBox;
                break;
            case BUTTON:
                JButton button = new JButton();
                button.setBackground(new Color(-1));
                button.setText("Submit");
                jPanel.add(button, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

                button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        clearStatusArea();

                        Runnable formRunnable = () -> {
                            handleForm();
                        };
                        Thread formThread = new Thread(formRunnable);
                        formThread.start();
                    }
                });

                component = button;
                break;
        }

        if (component != null) componentMap.put(elementName, component);
    }

    private void handleForm() {
        MusicXmlTask musicXmlTask = null;

        switch (selectedValue) {
            case "Set Properties":
                musicXmlTask = new SetPropertiesTask(componentMap);
                break;
            case "MusicXml File to Database Record":
                musicXmlTask = new MusicXml2DbTask(componentMap);
                break;
            case "Database Record to MusicXml File":
                musicXmlTask = new Db2MusicXmlTask(componentMap);
                break;
            case "Database Record to Lilypond File":
                musicXmlTask = new Db2LyTask(componentMap);
                break;
            case "MusicXml File to Lilypond File":
                musicXmlTask = new MusicXml2LyTask(componentMap);
                break;
        }

        try {
            if (musicXmlTask != null) musicXmlTask.execute();
            System.err.println("Task finished");
        } catch (TaskException e) {
            e.printStackTrace();
        }
    }

    private void setupStatusArea() {
        PrintStream statusPrintStream = new PrintStream(new StatusOutput(statusTextArea));
        System.setErr(statusPrintStream);
    }

    private void clearStatusArea() {
        try {
            statusTextArea.getDocument().remove(0, statusTextArea.getDocument().getLength());
            statusTextArea.update(statusTextArea.getGraphics());
        } catch (BadLocationException e) {
            //
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("MusicXmlTasks");
        frame.setContentPane(new MusicXmlTasks().taskForm);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(700, 1000);
        frame.setVisible(true);
    }

}
