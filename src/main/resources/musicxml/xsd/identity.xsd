<xs:schema
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified">

    <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>

    <xs:include schemaLocation="remaining.xsd"/>

    <xs:complexType name="identification">
        <xs:annotation>
            <xs:documentation>Identification contains basic metadata about the score. It includes the information in MuseData headers that may apply at a score-wide, movement-wide, or part-wide level. The creator, rights, source, and relation elements are based on Dublin Core.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="creator" type="typed-text" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="rights" type="typed-text" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="encoding" type="encoding" minOccurs="0"/>
            <xs:element name="source" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The source for the music that is encoded. This is similar to the Dublin Core source element.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="relation" type="typed-text" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="miscellaneous" type="miscellaneous" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="encoding">
        <xs:annotation>
            <xs:documentation>The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="encoding-date" type="yyyy-mm-dd"/>
            <xs:element name="encoder" type="typed-text"/>
            <xs:element name="software" type="xs:string"/>
            <xs:element name="encoding-description" type="xs:string"/>
            <xs:element name="supports" type="supports"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="supports">
        <xs:annotation>
            <xs:documentation>The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="yes-no" use="required"/>
        <xs:attribute name="element" type="xs:NMTOKEN" use="required"/>
        <xs:attribute name="attribute" type="xs:NMTOKEN"/>
        <xs:attribute name="value" type="xs:token"/>
    </xs:complexType>

    <xs:complexType name="miscellaneous">
        <xs:annotation>
            <xs:documentation>If a program has other metadata not yet supported in the MusicXML format, it can go in the miscellaneous element. The miscellaneous type puts each separate part of metadata into its own miscellaneous-field type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="miscellaneous-field" type="miscellaneous-field" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="miscellaneous-field">
        <xs:annotation>
            <xs:documentation>If a program has other metadata not yet supported in the MusicXML format, each type of metadata can go in a miscellaneous-field element. The required name attribute indicates the type of metadata the element content represents.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" type="xs:token" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

</xs:schema>
