<xs:schema
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="qualified">

    <xs:include schemaLocation="note.xsd"/>
    <xs:include schemaLocation="attributes.xsd"/>
    <xs:include schemaLocation="layout.xsd"/>
    <xs:include schemaLocation="common.xsd"/>

    <xs:complexType name="sound">
        <xs:annotation>
            <xs:documentation>The sound element contains general playback parameters. They can stand alone within a part/measure, or be a component element within a direction.

                Tempo is expressed in quarter notes per minute. If 0, the sound-generating program should prompt the user at the time of compiling a sound (MIDI) file.

                Dynamics (or MIDI velocity) are expressed as a percentage of the default forte value (90 for MIDI 1.0).

                Dacapo indicates to go back to the beginning of the movement. When used it always has the value "yes".

                Segno and dalsegno are used for backwards jumps to a segno sign; coda and tocoda are used for forward jumps to a coda sign. If there are multiple jumps, the value of these parameters can be used to name and distinguish them. If segno or coda is used, the divisions attribute can also be used to indicate the number of divisions per quarter note. Otherwise sound and MIDI generating programs may have to recompute this.

                By default, a dalsegno or dacapo attribute indicates that the jump should occur the first time through, while a tocoda attribute indicates the jump should occur the second time through. The time that jumps occur can be changed by using the time-only attribute.

                Forward-repeat is used when a forward repeat sign is implied, and usually follows a bar line. When used it always has the value of "yes".

                The fine attribute follows the final note or rest in a movement with a da capo or dal segno direction. If numeric, the value represents the actual duration of the final note or rest, which can be ambiguous in written notation and different among parts and voices. The value may also be "yes" to indicate no change to the final duration.

                If the sound element applies only particular times through a repeat, the time-only attribute indicates which times to apply the sound element.

                Pizzicato in a sound element effects all following notes. Yes indicates pizzicato, no indicates arco.

                The pan and elevation attributes are deprecated in Version 2.0. The pan and elevation elements in the midi-instrument element should be used instead. The meaning of the pan and elevation attributes is the same as for the pan and elevation elements. If both are present, the mid-instrument elements take priority.

                The damper-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the three common piano pedals and their MIDI controller equivalents. The yes value indicates the pedal is depressed; no indicates the pedal is released. A numeric value from 0 to 100 may also be used for half pedaling. This value is the percentage that the pedal is depressed. A value of 0 is equivalent to no, and a value of 100 is equivalent to yes.

                MIDI devices, MIDI instruments, and playback techniques are changed using the midi-device, midi-instrument, and play elements. When there are multiple instances of these elements, they should be grouped together by instrument using the id attribute values.

                The offset element is used to indicate that the sound takes place offset from the current score position. If the sound element is a child of a direction element, the sound offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in sound. It should not be used to compensate for latency issues in particular hardware configurations.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element name="midi-device" type="midi-device" minOccurs="0"/>
                <xs:element name="midi-instrument" type="midi-instrument" minOccurs="0"/>
                <xs:element name="play" type="play" minOccurs="0"/>
            </xs:sequence>
            <xs:element name="offset" type="offset" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="tempo" type="non-negative-decimal"/>
        <xs:attribute name="dynamics" type="non-negative-decimal"/>
        <xs:attribute name="dacapo" type="yes-no"/>
        <xs:attribute name="segno" type="xs:token"/>
        <xs:attribute name="dalsegno" type="xs:token"/>
        <xs:attribute name="coda" type="xs:token"/>
        <xs:attribute name="tocoda" type="xs:token"/>
        <xs:attribute name="divisions" type="divisions"/>
        <xs:attribute name="forward-repeat" type="yes-no"/>
        <xs:attribute name="fine" type="xs:token"/>
        <xs:attribute name="time-only" type="time-only"/>
        <xs:attribute name="pizzicato" type="yes-no"/>
        <xs:attribute name="pan" type="rotation-degrees"/>
        <xs:attribute name="elevation" type="rotation-degrees"/>
        <xs:attribute name="damper-pedal" type="yes-no-number"/>
        <xs:attribute name="soft-pedal" type="yes-no-number"/>
        <xs:attribute name="sostenuto-pedal" type="yes-no-number"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="direction">
        <xs:annotation>
            <xs:documentation>A direction is a musical indication that is not necessarily attached to a specific note. Two or more may be combined to indicate starts and stops of wedges, dashes, etc. For applications where a specific direction is indeed attached to a specific note, the direction element can be associated with the note element that follows it in score order that is not in a different voice.

                By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="direction-type" type="direction-type" maxOccurs="unbounded"/>
            <xs:element name="offset" type="offset" minOccurs="0"/>
            <xs:group ref="editorial-voice-direction"/>
            <xs:group ref="staff" minOccurs="0"/>
            <xs:element name="sound" type="sound" minOccurs="0"/>
        </xs:sequence>
        <xs:attributeGroup ref="placement"/>
        <xs:attributeGroup ref="directive"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="offset">
        <xs:annotation>
            <xs:documentation>An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. This affects the visual appearance of the direction. If the sound attribute is "yes", then the offset affects playback too. If the sound attribute is "no", then any sound associated with the direction takes effect at the current location. The sound attribute is "no" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="divisions">
                <xs:attribute name="sound" type="yes-no"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="direction-type">
        <xs:annotation>
            <xs:documentation>Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="rehearsal" type="formatted-text-id" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="segno" type="segno" maxOccurs="unbounded"/>
            <xs:element name="coda" type="coda" maxOccurs="unbounded"/>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="words" type="formatted-text-id">
                    <xs:annotation>
                        <xs:documentation>The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="symbol" type="formatted-symbol-id">
                    <xs:annotation>
                        <xs:documentation>The symbol element specifies a musical symbol using a canonical SMuFL glyph name. It is used when an occasional musical symbol is interspersed into text. It should not be used in place of semantic markup, such as metronome marks that mix text and symbols. Left justification is assumed if not specified. Enclosure is none by default.</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:element name="wedge" type="wedge"/>
            <xs:element name="dynamics" type="dynamics" maxOccurs="unbounded"/>
            <xs:element name="dashes" type="dashes"/>
            <xs:element name="bracket" type="bracket"/>
            <xs:element name="pedal" type="pedal"/>
            <xs:element name="metronome" type="metronome"/>
            <xs:element name="octave-shift" type="octave-shift"/>
            <xs:element name="harp-pedals" type="harp-pedals"/>
            <xs:element name="damp" type="empty-print-style-align-id">
                <xs:annotation>
                    <xs:documentation>The damp element specifies a harp damping mark.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="damp-all" type="empty-print-style-align-id">
                <xs:annotation>
                    <xs:documentation>The damp-all element specifies a harp damping mark for all strings.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="eyeglasses" type="empty-print-style-align-id">
                <xs:annotation>
                    <xs:documentation>The eyeglasses element specifies the eyeglasses symbol, common in commercial music.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="string-mute" type="string-mute"/>
            <xs:element name="scordatura" type="scordatura"/>
            <xs:element name="image" type="image"/>
            <xs:element name="principal-voice" type="principal-voice"/>
            <xs:element name="percussion" type="percussion" maxOccurs="unbounded"/>
            <xs:element name="accordion-registration" type="accordion-registration"/>
            <xs:element name="staff-divide" type="staff-divide"/>
            <xs:element name="other-direction" type="other-direction"/>
        </xs:choice>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="wedge">
        <xs:annotation>
            <xs:documentation>The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored. The niente attribute is yes if a circle appears at the point of the wedge, indicating a crescendo from nothing or diminuendo to nothing. It is no by default, and used only when the type is crescendo, or the type is stop for a wedge that began with a diminuendo type. The line-type is solid by default.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="wedge-type" use="required"/>
        <xs:attribute name="number" type="number-level"/>
        <xs:attribute name="spread" type="tenths"/>
        <xs:attribute name="niente" type="yes-no"/>
        <xs:attributeGroup ref="line-type"/>
        <xs:attributeGroup ref="dashed-formatting"/>
        <xs:attributeGroup ref="position"/>
        <xs:attributeGroup ref="color"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="wedge-type">
        <xs:annotation>
            <xs:documentation>The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="crescendo"/>
            <xs:enumeration value="diminuendo"/>
            <xs:enumeration value="stop"/>
            <xs:enumeration value="continue"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="dashes">
        <xs:annotation>
            <xs:documentation>The dashes type represents dashes, used for instance with cresc. and dim. marks.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="start-stop-continue" use="required"/>
        <xs:attribute name="number" type="number-level"/>
        <xs:attributeGroup ref="dashed-formatting"/>
        <xs:attributeGroup ref="position"/>
        <xs:attributeGroup ref="color"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="bracket">
        <xs:annotation>
            <xs:documentation>Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid by default.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="start-stop-continue" use="required"/>
        <xs:attribute name="number" type="number-level"/>
        <xs:attribute name="line-end" type="line-end" use="required"/>
        <xs:attribute name="end-length" type="tenths"/>
        <xs:attributeGroup ref="line-type"/>
        <xs:attributeGroup ref="dashed-formatting"/>
        <xs:attributeGroup ref="position"/>
        <xs:attributeGroup ref="color"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="line-end">
        <xs:annotation>
            <xs:documentation>The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="up"/>
            <xs:enumeration value="down"/>
            <xs:enumeration value="both"/>
            <xs:enumeration value="arrow"/>
            <xs:enumeration value="none"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="pedal">
        <xs:annotation>
            <xs:documentation>The pedal type represents piano pedal marks. In MusicXML 3.1 this includes sostenuto as well as damper pedal marks. The line attribute is yes if pedal lines are used. The sign attribute is yes if Ped, Sost, and * signs are used. For MusicXML 2.0 compatibility, the sign attribute is yes by default if the line attribute is no, and is no by default if the line attribute is yes. If the sign attribute is set to yes and the type is start or sostenuto, the abbreviated attribute is yes if the short P and S signs are used, and no if the full Ped and Sost signs are used. It is no by default. Otherwise the abbreviated attribute is ignored.

                The change and continue types are used when the line attribute is yes. The change type indicates a pedal lift and retake indicated with an inverted V marking. The continue type allows more precise formatting across system breaks and for more complex pedaling lines. The alignment attributes are ignored if the line attribute is yes.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="pedal-type" use="required"/>
        <xs:attribute name="number" type="number-level"/>
        <xs:attribute name="line" type="yes-no"/>
        <xs:attribute name="sign" type="yes-no"/>
        <xs:attribute name="abbreviated" type="yes-no"/>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="pedal-type">
        <xs:annotation>
            <xs:documentation>The pedal-type simple type is used to distinguish types of pedal directions. The start value indicates the start of a damper pedal, while the sostenuto value indicates the start of a sostenuto pedal. The change, continue, and stop values can be used with either the damper or sostenuto pedal. The soft pedal is not included here because there is no special symbol or graphic used for it beyond what can be specified with words and bracket elements.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="start"/>
            <xs:enumeration value="stop"/>
            <xs:enumeration value="sostenuto"/>
            <xs:enumeration value="change"/>
            <xs:enumeration value="continue"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="start-stop-change-continue">
        <xs:annotation>
            <xs:documentation>The start-stop-change-continue type is used to distinguish types of pedal directions.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="start"/>
            <xs:enumeration value="stop"/>
            <xs:enumeration value="change"/>
            <xs:enumeration value="continue"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="metronome">
        <xs:annotation>
            <xs:documentation>The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of metric modulations and other metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. Tied notes can be represented in both types of metronome marks by using the beat-unit-tied and metronome-tied elements. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:sequence>
                <xs:group ref="beat-unit"/>
                <xs:element name="beat-unit-tied" type="beat-unit-tied" minOccurs="0" maxOccurs="unbounded"/>
                <xs:choice>
                    <xs:element name="per-minute" type="per-minute"/>
                    <xs:sequence>
                        <xs:group ref="beat-unit"/>
                        <xs:element name="beat-unit-tied" type="beat-unit-tied" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:choice>
            </xs:sequence>
            <xs:sequence>
                <xs:element name="metronome-arrows" type="empty" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>If the metronome-arrows element is present, it indicates that metric modulation arrows are displayed on both sides of the metronome mark.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="metronome-note" type="metronome-note" maxOccurs="unbounded"/>
                <xs:sequence minOccurs="0">
                    <xs:element name="metronome-relation" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="metronome-note" type="metronome-note" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:sequence>
        </xs:choice>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="justify"/>
        <xs:attribute name="parentheses" type="yes-no"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:group name="beat-unit">
        <xs:annotation>
            <xs:documentation>The beat-unit group combines elements used repeatedly in the metronome element to specify a note within a metronome mark.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="beat-unit" type="note-type-value">
                <xs:annotation>
                    <xs:documentation>The beat-unit element indicates the graphical note type to use in a metronome mark.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="beat-unit-dot" type="empty" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="beat-unit-tied">
        <xs:annotation>
            <xs:documentation>The beat-unit-tied type indicates a beat-unit within a metronome mark that is tied to the preceding beat-unit. This allows or two or more tied notes to be associated with a per-minute value in a metronome mark, whereas the metronome-tied element is restricted to metric relationship marks.</xs:documentation>
        </xs:annotation>
        <xs:group ref="beat-unit"/>
    </xs:complexType>

    <xs:complexType name="per-minute">
        <xs:annotation>
            <xs:documentation>The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attributeGroup ref="font"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="metronome-note">
        <xs:annotation>
            <xs:documentation>The metronome-note type defines the appearance of a note within a metric relationship mark.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="metronome-type" type="note-type-value">
                <xs:annotation>
                    <xs:documentation>The metronome-type element works like the type element in defining metric relationships.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="metronome-dot" type="empty" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The metronome-dot element works like the dot element in defining metric relationships.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="metronome-beam" type="metronome-beam" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="metronome-tied" type="metronome-tied" minOccurs="0"/>
            <xs:element name="metronome-tuplet" type="metronome-tuplet" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="metronome-beam">
        <xs:annotation>
            <xs:documentation>The metronome-beam type works like the beam type in defining metric relationships, but does not include all the attributes available in the beam type.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="beam-value">
                <xs:attribute name="number" type="beam-level" default="1"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="metronome-tied">
        <xs:annotation>
            <xs:documentation>The metronome-tied indicates the presence of a tie within a metric relationship mark. As with the tied element, both the start and stop of the tie should be specified, in this case within separate metronome-note elements.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="start-stop" use="required"/>
    </xs:complexType>

    <xs:complexType name="metronome-tuplet">
        <xs:annotation>
            <xs:documentation>The metronome-tuplet type uses the same element structure as the time-modification element along with some attributes from the tuplet element.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="time-modification">
                <xs:attribute name="type" type="start-stop" use="required"/>
                <xs:attribute name="bracket" type="yes-no"/>
                <xs:attribute name="show-number" type="show-tuplet"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="octave-shift">
        <xs:annotation>
            <xs:documentation>The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="up-down-stop-continue" use="required"/>
        <xs:attribute name="number" type="number-level"/>
        <xs:attribute name="size" type="xs:positiveInteger" default="8"/>
        <xs:attributeGroup ref="dashed-formatting"/>
        <xs:attributeGroup ref="print-style"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="up-down-stop-continue">
        <xs:annotation>
            <xs:documentation>The up-down-stop-continue type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="up"/>
            <xs:enumeration value="down"/>
            <xs:enumeration value="stop"/>
            <xs:enumeration value="continue"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="harp-pedals">
        <xs:annotation>
            <xs:documentation>The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="pedal-tuning" type="pedal-tuning" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="pedal-tuning">
        <xs:annotation>
            <xs:documentation>The pedal-tuning type specifies the tuning of a single harp pedal.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="pedal-step" type="step">
                <xs:annotation>
                    <xs:documentation>The pedal-step element defines the pitch step for a single harp pedal.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pedal-alter" type="semitones">
                <xs:annotation>
                    <xs:documentation>The pedal-alter element defines the chromatic alteration for a single harp pedal.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="string-mute">
        <xs:annotation>
            <xs:documentation>The string-mute type represents string mute on and mute off symbols.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="on-off" use="required"/>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="scordatura">
        <xs:annotation>
            <xs:documentation>Scordatura string tunings are represented by a series of accord elements, similar to the staff-tuning elements. Strings are numbered from high to low.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="accord" type="accord" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="accord">
        <xs:annotation>
            <xs:documentation>The accord type represents the tuning of a single string in the scordatura element. It uses the same group of elements as the staff-tuning element. Strings are numbered from high to low.</xs:documentation>
        </xs:annotation>
        <xs:group ref="tuning"/>
        <xs:attribute name="string" type="string-number"/>
    </xs:complexType>

    <xs:complexType name="principal-voice">
        <xs:annotation>
            <xs:documentation>The principal-voice element represents principal and secondary voices in a score, either for analysis or for square bracket symbols that appear in a score. The symbol attribute indicates the type of symbol used at the start of the principal-voice. The content of the principal-voice element is used for analysis and may be any text value. When used for analysis separate from any printed score markings, the symbol attribute should be set to "none".</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="type" type="start-stop" use="required"/>
                <xs:attribute name="symbol" type="principal-voice-symbol" use="required"/>
                <xs:attributeGroup ref="print-style-align"/>
                <xs:attributeGroup ref="optional-unique-id"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="principal-voice-symbol">
        <xs:annotation>
            <xs:documentation>The principal-voice-symbol type represents the type of symbol used to indicate the start of a principal or secondary voice. The "plain" value represents a plain square bracket. The value of "none" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Hauptstimme"/>
            <xs:enumeration value="Nebenstimme"/>
            <xs:enumeration value="plain"/>
            <xs:enumeration value="none"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="accordion-registration">
        <xs:annotation>
            <xs:documentation>The accordion-registration type is use for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="accordion-high" type="empty" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol. This element is omitted if no dot is present.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="accordion-middle" type="accordion-middle" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol. This element is omitted if no dots are present.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="accordion-low" type="empty" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol. This element is omitted if no dot is present.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="accordion-middle">
        <xs:annotation>
            <xs:documentation>The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:positiveInteger">
            <xs:minInclusive value="1"/>
            <xs:maxInclusive value="3"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="staff-divide">
        <xs:annotation>
            <xs:documentation>The staff-divide element represents the staff division arrow symbols found at SMuFL code points U+E00B, U+E00C, and U+E00D.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="staff-divide-symbol" use="required"/>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="staff-divide-symbol">
        <xs:annotation>
            <xs:documentation>The staff-divide-symbol type is used for staff division symbols. The down, up, and up-down values correspond to SMuFL code points U+E00B, U+E00C, and U+E00D respectively.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="down"/>
            <xs:enumeration value="up"/>
            <xs:enumeration value="up-down"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="percussion">
        <xs:annotation>
            <xs:documentation>The percussion element is used to define percussion pictogram symbols. Definitions for these symbols can be found in Kurt Stone's "Music Notation in the Twentieth Century" on pages 206-212 and 223. Some values are added to these based on how usage has evolved in the 30 years since Stone's book was published.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="glass" type="glass"/>
            <xs:element name="metal" type="metal"/>
            <xs:element name="wood" type="wood"/>
            <xs:element name="pitched" type="pitched"/>
            <xs:element name="membrane" type="membrane"/>
            <xs:element name="effect" type="effect"/>
            <xs:element name="timpani" type="empty"/>
            <xs:element name="beater" type="beater"/>
            <xs:element name="stick" type="stick"/>
            <xs:element name="stick-location" type="stick-location"/>
            <xs:element name="other-percussion" type="other-text"/>
        </xs:choice>
        <xs:attributeGroup ref="print-style-align"/>
        <xs:attributeGroup ref="enclosure"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="glass">
        <xs:annotation>
            <xs:documentation>The glass type represents pictograms for glass percussion instruments. The smufl attribute is used to distinguish different SMuFL glyphs for wind chimes in the chimes pictograms range, including those made of materials other than glass.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="glass-value">
                <xs:attribute name="smufl" type="smufl-pictogram-glyph-name"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="glass-value">
        <xs:annotation>
            <xs:documentation>The glass-value type represents pictograms for glass percussion instruments.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="glass harmonica"/>
            <xs:enumeration value="glass harp"/>
            <xs:enumeration value="wind chimes"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="metal">
        <xs:annotation>
            <xs:documentation>The metal type represents pictograms for metal percussion instruments. The hi-hat value refers to a pictogram like Stone's high-hat cymbals but without the long vertical line at the bottom.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="agogo"/>
            <xs:enumeration value="almglocken"/>
            <xs:enumeration value="bell"/>
            <xs:enumeration value="bell plate"/>
            <xs:enumeration value="bell tree"/>
            <xs:enumeration value="brake drum"/>
            <xs:enumeration value="cencerro"/>
            <xs:enumeration value="chain rattle"/>
            <xs:enumeration value="Chinese cymbal"/>
            <xs:enumeration value="cowbell"/>
            <xs:enumeration value="crash cymbals"/>
            <xs:enumeration value="crotale"/>
            <xs:enumeration value="cymbal tongs"/>
            <xs:enumeration value="domed gong"/>
            <xs:enumeration value="finger cymbals"/>
            <xs:enumeration value="flexatone"/>
            <xs:enumeration value="gong"/>
            <xs:enumeration value="hi-hat"/>
            <xs:enumeration value="high-hat cymbals"/>
            <xs:enumeration value="handbell"/>
            <xs:enumeration value="jaw harp"/>
            <xs:enumeration value="jingle bells"/>
            <xs:enumeration value="musical saw"/>
            <xs:enumeration value="shell bells"/>
            <xs:enumeration value="sistrum"/>
            <xs:enumeration value="sizzle cymbal"/>
            <xs:enumeration value="sleigh bells"/>
            <xs:enumeration value="suspended cymbal"/>
            <xs:enumeration value="tam tam"/>
            <xs:enumeration value="tam tam with beater"/>
            <xs:enumeration value="triangle"/>
            <xs:enumeration value="Vietnamese hat"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="wood">
        <xs:annotation>
            <xs:documentation>The wood type represents pictograms for wood percussion instruments. The maraca and maracas values distinguish the one- and two-maraca versions of the pictogram.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="bamboo scraper"/>
            <xs:enumeration value="board clapper"/>
            <xs:enumeration value="cabasa"/>
            <xs:enumeration value="castanets"/>
            <xs:enumeration value="castanets with handle"/>
            <xs:enumeration value="claves"/>
            <xs:enumeration value="football rattle"/>
            <xs:enumeration value="guiro"/>
            <xs:enumeration value="log drum"/>
            <xs:enumeration value="maraca"/>
            <xs:enumeration value="maracas"/>
            <xs:enumeration value="quijada"/>
            <xs:enumeration value="rainstick"/>
            <xs:enumeration value="ratchet"/>
            <xs:enumeration value="reco-reco"/>
            <xs:enumeration value="sandpaper blocks"/>
            <xs:enumeration value="slit drum"/>
            <xs:enumeration value="temple block"/>
            <xs:enumeration value="vibraslap"/>
            <xs:enumeration value="whip"/>
            <xs:enumeration value="wood block"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="pitched">
        <xs:annotation>
            <xs:documentation>The pitched-value type represents pictograms for pitched percussion instruments. The smufl attribute is used to distinguish different SMuFL glyphs for a particular pictogram within the tuned mallet percussion pictograms range.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="pitched-value">
                <xs:attribute name="smufl" type="smufl-pictogram-glyph-name"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="pitched-value">
        <xs:annotation>
            <xs:documentation>The pitched-value type represents pictograms for pitched percussion instruments. The chimes and tubular chimes values distinguish the single-line and double-line versions of the pictogram.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="celesta"/>
            <xs:enumeration value="chimes"/>
            <xs:enumeration value="glockenspiel"/>
            <xs:enumeration value="lithophone"/>
            <xs:enumeration value="mallet"/>
            <xs:enumeration value="marimba"/>
            <xs:enumeration value="steel drums"/>
            <xs:enumeration value="tubaphone"/>
            <xs:enumeration value="tubular chimes"/>
            <xs:enumeration value="vibraphone"/>
            <xs:enumeration value="xylophone"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="membrane">
        <xs:annotation>
            <xs:documentation>The membrane type represents pictograms for membrane percussion instruments.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="bass drum"/>
            <xs:enumeration value="bass drum on side"/>
            <xs:enumeration value="bongos"/>
            <xs:enumeration value="Chinese tomtom"/>
            <xs:enumeration value="conga drum"/>
            <xs:enumeration value="cuica"/>
            <xs:enumeration value="goblet drum"/>
            <xs:enumeration value="Indo-American tomtom"/>
            <xs:enumeration value="Japanese tomtom"/>
            <xs:enumeration value="military drum"/>
            <xs:enumeration value="snare drum"/>
            <xs:enumeration value="snare drum snares off"/>
            <xs:enumeration value="tabla"/>
            <xs:enumeration value="tambourine"/>
            <xs:enumeration value="tenor drum"/>
            <xs:enumeration value="timbales"/>
            <xs:enumeration value="tomtom"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="effect">
        <xs:annotation>
            <xs:documentation>The effect type represents pictograms for sound effect percussion instruments. The cannon, lotus flute, and megaphone values are in addition to Stone's list.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="anvil"/>
            <xs:enumeration value="auto horn"/>
            <xs:enumeration value="bird whistle"/>
            <xs:enumeration value="cannon"/>
            <xs:enumeration value="duck call"/>
            <xs:enumeration value="gun shot"/>
            <xs:enumeration value="klaxon horn"/>
            <xs:enumeration value="lions roar"/>
            <xs:enumeration value="lotus flute"/>
            <xs:enumeration value="megaphone"/>
            <xs:enumeration value="police whistle"/>
            <xs:enumeration value="siren"/>
            <xs:enumeration value="slide whistle"/>
            <xs:enumeration value="thunder sheet"/>
            <xs:enumeration value="wind machine"/>
            <xs:enumeration value="wind whistle"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="beater">
        <xs:annotation>
            <xs:documentation>The beater type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="beater-value">
                <xs:attribute name="tip" type="tip-direction"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="beater-value">
        <xs:annotation>
            <xs:documentation>The beater-value type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram. The finger and hammer values are in addition to Stone's list.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="bow"/>
            <xs:enumeration value="chime hammer"/>
            <xs:enumeration value="coin"/>
            <xs:enumeration value="drum stick"/>
            <xs:enumeration value="finger"/>
            <xs:enumeration value="fingernail"/>
            <xs:enumeration value="fist"/>
            <xs:enumeration value="guiro scraper"/>
            <xs:enumeration value="hammer"/>
            <xs:enumeration value="hand"/>
            <xs:enumeration value="jazz stick"/>
            <xs:enumeration value="knitting needle"/>
            <xs:enumeration value="metal hammer"/>
            <xs:enumeration value="slide brush on gong"/>
            <xs:enumeration value="snare stick"/>
            <xs:enumeration value="spoon mallet"/>
            <xs:enumeration value="superball"/>
            <xs:enumeration value="triangle beater"/>
            <xs:enumeration value="triangle beater plain"/>
            <xs:enumeration value="wire brush"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="stick">
        <xs:annotation>
            <xs:documentation>The stick type represents pictograms where the material of the stick, mallet, or beater is included.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="stick-type" type="stick-type"/>
            <xs:element name="stick-material" type="stick-material"/>
        </xs:sequence>
        <xs:attribute name="tip" type="tip-direction"/>
    </xs:complexType>

    <xs:simpleType name="stick-type">
        <xs:annotation>
            <xs:documentation>The stick-type type represents the shape of pictograms where the material
                in the stick, mallet, or beater is represented in the pictogram.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="bass drum"/>
            <xs:enumeration value="double bass drum"/>
            <xs:enumeration value="glockenspiel"/>
            <xs:enumeration value="gum"/>
            <xs:enumeration value="hammer"/>
            <xs:enumeration value="superball"/>
            <xs:enumeration value="timpani"/>
            <xs:enumeration value="wound"/>
            <xs:enumeration value="xylophone"/>
            <xs:enumeration value="yarn"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="stick-material">
        <xs:annotation>
            <xs:documentation>The stick-material type represents the material being displayed in a stick pictogram.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="soft"/>
            <xs:enumeration value="medium"/>
            <xs:enumeration value="hard"/>
            <xs:enumeration value="shaded"/>
            <xs:enumeration value="x"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="tip-direction">
        <xs:annotation>
            <xs:documentation>The tip-direction type represents the direction in which the tip of a stick or beater points, using Unicode arrow terminology.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="up"/>
            <xs:enumeration value="down"/>
            <xs:enumeration value="left"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="northwest"/>
            <xs:enumeration value="northeast"/>
            <xs:enumeration value="southeast"/>
            <xs:enumeration value="southwest"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="stick-location">
        <xs:annotation>
            <xs:documentation>The stick-location type represents pictograms for the location of sticks, beaters, or mallets on cymbals, gongs, drums, and other instruments.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="center"/>
            <xs:enumeration value="rim"/>
            <xs:enumeration value="cymbal bell"/>
            <xs:enumeration value="cymbal edge"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="smufl-pictogram-glyph-name">
        <xs:annotation>
            <xs:documentation>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="smufl-glyph-name">
            <xs:pattern value="pict\c+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="other-direction">
        <xs:annotation>
            <xs:documentation>The other-direction type is used to define any direction symbols not yet in the MusicXML format. The smufl attribute can be used to specify a particular direction symbol, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. Using the other-direction type without the smufl attribute allows for extended representation, though without application interoperability.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attributeGroup ref="print-object"/>
                <xs:attributeGroup ref="print-style-align"/>
                <xs:attributeGroup ref="smufl"/>
                <xs:attributeGroup ref="optional-unique-id"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="harmony">
        <xs:annotation>
            <xs:documentation>The harmony type is based on Humdrum's **harm encoding, extended to support chord symbols in popular music as well as functional harmony analysis in classical music.

                If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.

                The harmony object may be used for analysis or for chord symbols. The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:group ref="harmony-chord" maxOccurs="unbounded"/>
            <xs:element name="frame" type="frame" minOccurs="0"/>
            <xs:element name="offset" type="offset" minOccurs="0"/>
            <xs:group ref="editorial"/>
            <xs:group ref="staff" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="harmony-type"/>
        <xs:attributeGroup ref="print-object"/>
        <xs:attribute name="print-frame" type="yes-no"/>
        <xs:attributeGroup ref="print-style"/>
        <xs:attributeGroup ref="placement"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:simpleType name="harmony-type">
        <xs:annotation>
            <xs:documentation>The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="explicit"/>
            <xs:enumeration value="implied"/>
            <xs:enumeration value="alternate"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:group name="harmony-chord">
        <xs:annotation>
            <xs:documentation>A harmony element can contain many stacked chords (e.g. V of II). A sequence of harmony-chord groups is used for this type of secondary function, where V of II would be represented by a harmony-chord with a V function followed by a harmony-chord with a II function.

                A root is a pitch name like C, D, E, where a function is an indication like I, II, III. It is an either/or choice to avoid data inconsistency.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice>
                <xs:element name="root" type="root"/>
                <xs:element name="function" type="style-text">
                    <xs:annotation>
                        <xs:documentation>The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:element name="kind" type="kind"/>
            <xs:element name="inversion" type="inversion" minOccurs="0"/>
            <xs:element name="bass" type="bass" minOccurs="0"/>
            <xs:element name="degree" type="degree" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="root">
        <xs:annotation>
            <xs:documentation>The root type indicates a pitch like C, D, E vs. a function indication like I, II, III. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="root-step" type="root-step"/>
            <xs:element name="root-alter" type="root-alter" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="root-step">
        <xs:annotation>
            <xs:documentation>The root-step type represents the pitch step of the root of the current chord within the harmony element. The text attribute indicates how the root should appear in a score if not using the element contents.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="step">
                <xs:attribute name="text" type="xs:token"/>
                <xs:attributeGroup ref="print-style"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="root-alter">
        <xs:annotation>
            <xs:documentation>The root-alter type represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="semitones">
                <xs:attributeGroup ref="print-object"/>
                <xs:attributeGroup ref="print-style"/>
                <xs:attribute name="location" type="left-right"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="kind">
        <xs:annotation>
            <xs:documentation>Kind indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points

                The attributes are used to indicate the formatting of the symbol. Since the kind element is the constant in all the harmony-chord groups that can make up a polychord, many formatting attributes are here.

                The use-symbols attribute is yes if the kind should be represented when possible with harmony symbols rather than letters and numbers. These symbols include:

                major: a triangle, like Unicode 25B3
                minor: -, like Unicode 002D
                augmented: +, like Unicode 002B
                diminished: °, like Unicode 00B0
                half-diminished: ø, like Unicode 00F8

                For the major-minor kind, only the minor symbol is used when use-symbols is yes. The major symbol is set using the symbol attribute in the degree-value element. The corresponding degree-alter value will usually be 0 in this case.

                The text attribute describes how the kind should be spelled in a score. If use-symbols is yes, the value of the text attribute follows the symbol. The stack-degrees attribute is yes if the degree elements should be stacked above each other. The parentheses-degrees attribute is yes if all the degrees should be in parentheses. The bracket-degrees attribute is yes if all the degrees should be in a bracket. If not specified, these values are implementation-specific. The alignment attributes are for the entire harmony-chord group of which this kind element is a part.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="kind-value">
                <xs:attribute name="use-symbols" type="yes-no"/>
                <xs:attribute name="text" type="xs:token"/>
                <xs:attribute name="stack-degrees" type="yes-no"/>
                <xs:attribute name="parentheses-degrees" type="yes-no"/>
                <xs:attribute name="bracket-degrees" type="yes-no"/>
                <xs:attributeGroup ref="print-style"/>
                <xs:attributeGroup ref="halign"/>
                <xs:attributeGroup ref="valign"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="kind-value">
        <xs:annotation>
            <xs:documentation>A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:

                Triads:
                major (major third, perfect fifth)
                minor (minor third, perfect fifth)
                augmented (major third, augmented fifth)
                diminished (minor third, diminished fifth)
                Sevenths:
                dominant (major triad, minor seventh)
                major-seventh (major triad, major seventh)
                minor-seventh (minor triad, minor seventh)
                diminished-seventh (diminished triad, diminished seventh)
                augmented-seventh (augmented triad, minor seventh)
                half-diminished (diminished triad, minor seventh)
                major-minor (minor triad, major seventh)
                Sixths:
                major-sixth (major triad, added sixth)
                minor-sixth (minor triad, added sixth)
                Ninths:
                dominant-ninth (dominant-seventh, major ninth)
                major-ninth (major-seventh, major ninth)
                minor-ninth (minor-seventh, major ninth)
                11ths (usually as the basis for alteration):
                dominant-11th (dominant-ninth, perfect 11th)
                major-11th (major-ninth, perfect 11th)
                minor-11th (minor-ninth, perfect 11th)
                13ths (usually as the basis for alteration):
                dominant-13th (dominant-11th, major 13th)
                major-13th (major-11th, major 13th)
                minor-13th (minor-11th, major 13th)
                Suspended:
                suspended-second (major second, perfect fifth)
                suspended-fourth (perfect fourth, perfect fifth)
                Functional sixths:
                Neapolitan
                Italian
                French
                German
                Other:
                pedal (pedal-point bass)
                power (perfect fifth)
                Tristan

                The "other" kind is used when the harmony is entirely composed of add elements. The "none" kind is used to explicitly encode absence of chords or functional harmony.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="major"/>
            <xs:enumeration value="minor"/>
            <xs:enumeration value="augmented"/>
            <xs:enumeration value="diminished"/>
            <xs:enumeration value="dominant"/>
            <xs:enumeration value="major-seventh"/>
            <xs:enumeration value="minor-seventh"/>
            <xs:enumeration value="diminished-seventh"/>
            <xs:enumeration value="augmented-seventh"/>
            <xs:enumeration value="half-diminished"/>
            <xs:enumeration value="major-minor"/>
            <xs:enumeration value="major-sixth"/>
            <xs:enumeration value="minor-sixth"/>
            <xs:enumeration value="dominant-ninth"/>
            <xs:enumeration value="major-ninth"/>
            <xs:enumeration value="minor-ninth"/>
            <xs:enumeration value="dominant-11th"/>
            <xs:enumeration value="major-11th"/>
            <xs:enumeration value="minor-11th"/>
            <xs:enumeration value="dominant-13th"/>
            <xs:enumeration value="major-13th"/>
            <xs:enumeration value="minor-13th"/>
            <xs:enumeration value="suspended-second"/>
            <xs:enumeration value="suspended-fourth"/>
            <xs:enumeration value="Neapolitan"/>
            <xs:enumeration value="Italian"/>
            <xs:enumeration value="French"/>
            <xs:enumeration value="German"/>
            <xs:enumeration value="pedal"/>
            <xs:enumeration value="power"/>
            <xs:enumeration value="Tristan"/>
            <xs:enumeration value="other"/>
            <xs:enumeration value="none"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="inversion">
        <xs:annotation>
            <xs:documentation>The inversion type represents harmony inversions. The value is a number indicating which inversion is used: 0 for root position, 1 for first inversion, etc.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:nonNegativeInteger">
                <xs:attributeGroup ref="print-style"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="bass">
        <xs:annotation>
            <xs:documentation>The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="bass-step" type="bass-step"/>
            <xs:element name="bass-alter" type="bass-alter" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bass-step">
        <xs:annotation>
            <xs:documentation>The bass-step type represents the pitch step of the bass of the current chord within the harmony element. The text attribute indicates how the bass should appear in a score if not using the element contents.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="step">
                <xs:attribute name="text" type="xs:token"/>
                <xs:attributeGroup ref="print-style"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="bass-alter">
        <xs:annotation>
            <xs:documentation>The bass-alter type represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right by default.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="semitones">
                <xs:attributeGroup ref="print-object"/>
                <xs:attributeGroup ref="print-style"/>
                <xs:attribute name="location" type="left-right"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="degree">
        <xs:annotation>
            <xs:documentation>The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed.

                A harmony of kind "other" can be spelled explicitly by using a series of degree elements together with a root.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="degree-value" type="degree-value"/>
            <xs:element name="degree-alter" type="degree-alter"/>
            <xs:element name="degree-type" type="degree-type"/>
        </xs:sequence>
        <xs:attributeGroup ref="print-object"/>
    </xs:complexType>

    <xs:complexType name="degree-value">
        <xs:annotation>
            <xs:documentation>The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the type of the degree should be displayed in a score. The degree-value symbol attribute indicates that a symbol should be used in specifying the degree. If the symbol attribute is present, the value of the text attribute follows the symbol.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:positiveInteger">
                <xs:attribute name="symbol" type="degree-symbol-value"/>
                <xs:attribute name="text" type="xs:token"/>
                <xs:attributeGroup ref="print-style"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="degree-symbol-value">
        <xs:annotation>
            <xs:documentation>The degree-symbol-value type indicates indicates that a symbol should be used in specifying the degree.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="major"/>
            <xs:enumeration value="minor"/>
            <xs:enumeration value="augmented"/>
            <xs:enumeration value="diminished"/>
            <xs:enumeration value="half-diminished"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="degree-alter">
        <xs:annotation>
            <xs:documentation>The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration; it is no by default.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="semitones">
                <xs:attributeGroup ref="print-style"/>
                <xs:attribute name="plus-minus" type="yes-no"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="degree-type">
        <xs:annotation>
            <xs:documentation>The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed in a score.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="degree-type-value">
                <xs:attribute name="text" type="xs:token"/>
                <xs:attributeGroup ref="print-style"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="degree-type-value">
        <xs:annotation>
            <xs:documentation>The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="add"/>
            <xs:enumeration value="alter"/>
            <xs:enumeration value="subtract"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="frame">
        <xs:annotation>
            <xs:documentation>The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information. The frame type's unplayed attribute indicates what to display above a string that has no associated frame-note element. Typical values are x and the empty string. If the attribute is not present, the display of the unplayed string is application-defined.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="frame-strings" type="xs:positiveInteger">
                <xs:annotation>
                    <xs:documentation>The frame-strings element gives the overall size of the frame in vertical lines (strings).</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="frame-frets" type="xs:positiveInteger">
                <xs:annotation>
                    <xs:documentation>The frame-frets element gives the overall size of the frame in horizontal spaces (frets).</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="first-fret" type="first-fret" minOccurs="0"/>
            <xs:element name="frame-note" type="frame-note" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attributeGroup ref="position"/>
        <xs:attributeGroup ref="color"/>
        <xs:attributeGroup ref="halign"/>
        <xs:attributeGroup ref="valign-image"/>
        <xs:attribute name="height" type="tenths"/>
        <xs:attribute name="width" type="tenths"/>
        <xs:attribute name="unplayed" type="xs:token"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="first-fret">
        <xs:annotation>
            <xs:documentation>The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:positiveInteger">
                <xs:attribute name="text" type="xs:token"/>
                <xs:attribute name="location" type="left-right"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="frame-note">
        <xs:annotation>
            <xs:documentation>The frame-note type represents each note included in the frame. An open string will have a fret value of 0, while a muted string will not be associated with a frame-note element.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="string" type="string"/>
            <xs:element name="fret" type="fret"/>
            <xs:element name="fingering" type="fingering" minOccurs="0"/>
            <xs:element name="barre" type="barre" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="barre">
        <xs:annotation>
            <xs:documentation>The barre element indicates placing a finger over multiple strings on a single fret. The type is "start" for the lowest pitched string (e.g., the string with the highest MusicXML number) and is "stop" for the highest pitched string.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="start-stop" use="required"/>
        <xs:attributeGroup ref="color"/>
    </xs:complexType>

    <xs:complexType name="grouping">
        <xs:annotation>
            <xs:documentation>The grouping type is used for musical analysis. When the type attribute is "start" or "single", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a "stop" type of grouping may be ignored.

                This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="feature" type="feature" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="type" type="start-stop-single" use="required"/>
        <xs:attribute name="number" type="xs:token" default="1"/>
        <xs:attribute name="member-of" type="xs:token"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:complexType name="feature">
        <xs:annotation>
            <xs:documentation>The feature type is a part of the grouping element used for musical analysis. The type attribute represents the type of the feature and the element content represents its value. This type is flexible to allow for different analyses.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="type" type="xs:token"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="print">
        <xs:annotation>
            <xs:documentation>The print type contains general printing parameters, including the layout elements defined in the layout.mod file. The part-name-display and part-abbreviation-display elements used in the score.mod file may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system.

                Layout elements in a print statement only apply to the current page, system, staff, or measure. Music that follows continues to take the default values from the layout included in the defaults element.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:group ref="layout"/>
            <xs:element name="measure-layout" type="measure-layout" minOccurs="0"/>
            <xs:element name="measure-numbering" type="measure-numbering" minOccurs="0"/>
            <xs:element name="part-name-display" type="name-display" minOccurs="0"/>
            <xs:element name="part-abbreviation-display" type="name-display" minOccurs="0"/>
        </xs:sequence>
        <xs:attributeGroup ref="print-attributes"/>
        <xs:attributeGroup ref="optional-unique-id"/>
    </xs:complexType>

    <xs:attributeGroup name="print-attributes">
        <xs:annotation>
            <xs:documentation>The print-attributes group is used by the print element. The new-system and new-page attributes indicate whether to force a system or page break, or to force the current music onto the same system or page as the preceding music. Normally this is the first music data within a measure. If used in multi-part music, they should be placed in the same positions within each part, or the results are undefined. The page-number attribute sets the number of a new page; it is ignored if new-page is not "yes". Version 2.0 adds a blank-page attribute. This is a positive integer value that specifies the number of blank pages to insert before the current measure. It is ignored if new-page is not "yes". These blank pages have no music, but may have text or images specified by the credit element. This is used to allow a combination of pages that are all text, or all text and images, together with pages of music.

                The staff-spacing attribute specifies spacing between multiple staves in tenths of staff space. This is deprecated as of Version 1.1; the staff-layout element should be used instead. If both are present, the staff-layout values take priority.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="staff-spacing" type="tenths"/>
        <xs:attribute name="new-system" type="yes-no"/>
        <xs:attribute name="new-page" type="yes-no"/>
        <xs:attribute name="blank-page" type="xs:positiveInteger"/>
        <xs:attribute name="page-number" type="xs:token"/>
    </xs:attributeGroup>

    <xs:complexType name="measure-numbering">
        <xs:annotation>
            <xs:documentation>The measure-numbering type describes how frequently measure numbers are displayed on this part. The number attribute from the measure element is used for printing. Measures with an implicit attribute set to "yes" never display a measure number, regardless of the measure-numbering setting.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="measure-numbering-value">
                <xs:attributeGroup ref="print-style-align"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="measure-numbering-value">
        <xs:annotation>
            <xs:documentation>The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="measure"/>
            <xs:enumeration value="system"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:group name="editorial-voice-direction">
        <xs:annotation>
            <xs:documentation>The editorial-voice-direction group supports the common combination of editorial and voice information for a direction element. It is separate from the editorial-voice element because extensions and restrictions might be different for directions than for the note and forward elements.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:group ref="footnote" minOccurs="0"/>
            <xs:group ref="level" minOccurs="0"/>
            <xs:group ref="voice" minOccurs="0"/>
        </xs:sequence>
    </xs:group>

</xs:schema>
